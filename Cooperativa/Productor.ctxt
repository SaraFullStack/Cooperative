#BlueJ class context
comment0.target=Productor
comment1.params=nombre\ hectareas\ productos
comment1.target=Productor(java.lang.String,\ double,\ java.util.List)
comment1.text=\r\n\ Constructor\ de\ la\ clase\ Productor.\r\n\ \r\n\ @param\ nombre\r\n\ @param\ hectareas\r\n\ @param\ productos\r\n
comment10.params=
comment10.target=java.util.UUID\ getId()
comment10.text=\r\n\ Obtiene\ el\ ID\ del\ productor.\r\n\r\n\ @return\ el\ ID\ del\ productor.\r\n
comment11.params=
comment11.target=java.util.List\ getProductos()
comment11.text=\r\n\ Obtiene\ la\ lista\ de\ productos\ del\ productor.\r\n\r\n\ @return\ la\ lista\ de\ productos\ del\ productor.\r\n
comment12.params=nombre
comment12.target=void\ setNombre(java.lang.String)
comment12.text=\r\n\ Establece\ el\ nombre\ del\ productor.\r\n\r\n\ @param\ nombre\ \ \ el\ nuevo\ nombre\ del\ productor.\r\n
comment2.params=
comment2.target=Productor\ crearProductor()
comment2.text=\r\n\ \r\n
comment3.params=productores\ producto\ productoresNombres\ random
comment3.target=ProductorFederado\ crearProductorFederado(java.util.List,\ java.lang.String,\ java.util.List,\ boolean)
comment3.text=\r\n\ Crea\ un\ productor\ federado\ a\ partir\ de\ una\ lista\ de\ productores,\ un\ nombre\ de\ producto,\r\n\ una\ lista\ de\ nombres\ de\ productores\ y\ un\ indicador\ de\ aleatoriedad.\r\n\r\n\ @param\ productores\ \ \ \ \ \ \ \ \ \ la\ lista\ de\ productores\ disponibles.\r\n\ @param\ producto\ \ \ \ \ \ \ \ \ \ \ \ \ el\ nombre\ del\ producto\ deseado.\r\n\ @param\ productoresNombres\ \ \ la\ lista\ de\ nombres\ de\ productores.\r\n\ @param\ random\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ un\ indicador\ de\ aleatoriedad.\r\n\ @return\ el\ objeto\ ProductorFederado\ creado.\r\n\ @throws\ IllegalArgumentException\ si\ los\ productores\ o\ el\ producto\ proporcionados\ no\ son\ correctos.\r\n
comment4.params=listaProductores
comment4.target=void\ imprimirTodos(java.util.List)
comment4.text=\r\n\ Imprime\ los\ detalles\ de\ todos\ los\ productores\ en\ la\ lista\ dada.\r\n\r\n\ @param\ listaProductores\ \ \ la\ lista\ de\ productores\ a\ imprimir.\r\n
comment5.params=productor
comment5.target=void\ imprimirElemento(Productor)
comment5.text=\r\n\ Imprime\ los\ detalles\ del\ productor\ dado.\r\n\r\n\ @param\ productor\ \ \ el\ objeto\ Productor\ a\ imprimir.\r\n
comment6.params=productores
comment6.target=java.util.List\ borrarProductor(java.util.List)
comment6.text=\r\n\ Borra\ un\ productor\ de\ la\ lista\ de\ productores.\r\n\r\n\ @param\ productores\ \ \ la\ lista\ de\ productores.\r\n\ @return\ la\ lista\ de\ productores\ actualizada\ despu\u00E9s\ de\ eliminar\ el\ productor.\r\n
comment7.params=productor
comment7.target=java.lang.String\ tipoProductor(Productor)
comment7.text=\r\n\ Devuelve\ el\ tipo\ de\ productor\ del\ productor\ dado.\r\n\r\n\ @param\ productor\ \ \ el\ objeto\ Productor\ para\ el\ cual\ se\ desea\ obtener\ el\ tipo.\r\n\ @return\ el\ tipo\ de\ productor.\r\n
comment8.params=
comment8.target=java.lang.String\ getNombre()
comment8.text=\r\n\ Obtiene\ el\ n\u00FAmero\ total\ de\ hect\u00E1reas\ del\ productor.\r\n\r\n\ @return\ el\ n\u00FAmero\ total\ de\ hect\u00E1reas\ del\ productor.\r\n
comment9.params=
comment9.target=double\ getHectareas()
numComments=13
